// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Text;
using AppKit;
using CoreGraphics;
using MonoDevelop.Mac.Debug.Services;

namespace MonoDevelop.Mac.Debug
{
	class AccessibilityWindow : NSWindow
	{
		const int margin = 10;
		readonly NSStackView contentView;

		public event EventHandler<NSView> RaiseAccessibilityIssueSelected;
		public event EventHandler AuditRequested;
		public event EventHandler ShowErrorsRequested;

		public AccessibilityWindow (CGRect frame) : base(frame, NSWindowStyle.Titled | NSWindowStyle.Resizable, NSBackingStore.Buffered, false)
		{
			ShowsToolbarButton = false;
			MovableByWindowBackground = false;

			contentView = NativeViewHelpers.CreateVerticalStackView(margin);
			ContentView = contentView;

			var buttonContainer = NativeViewHelpers.CreateHorizontalStackView();
			buttonContainer.Distribution = NSStackViewDistribution.FillEqually;
			contentView.AddArrangedSubview(buttonContainer);
			buttonContainer.WidthAnchor.ConstraintEqualToConstant (370).Active = true;
			buttonContainer.HeightAnchor.ConstraintEqualToConstant(50).Active = true;
			buttonContainer.CenterXAnchor.ConstraintEqualToAnchor(contentView.CenterXAnchor, 20).Active = true;

			var runAuditButton = NativeViewHelpers.CreateButton("Run Audit");
			buttonContainer.AddArrangedSubview(runAuditButton);
			runAuditButton.Activated += (sender, e) => AuditRequested?.Invoke (this, EventArgs.Empty);

			var showHideErrorsButton = NativeViewHelpers.CreateButton("Show/Hide Errors");
			buttonContainer.AddArrangedSubview(showHideErrorsButton);
			contentView.AddArrangedSubview(new NSView() { TranslatesAutoresizingMaskIntoConstraints = false });
			showHideErrorsButton.Activated += (sender, e) => ShowErrorsRequested?.Invoke(this, EventArgs.Empty);

			errorLabel = NativeViewHelpers.CreateLabel("");
			buttonContainer.AddArrangedSubview(errorLabel);

			var accessibilityService = AccessibilityService.Current;
			accessibilityService.ScanFinished += (s, e) =>
			{
				errorLabel.StringValue = string.Format("{0} errors found.", accessibilityService.IssuesFound);
			};

			outlineAccessibilityView = new OutlineView();
			outlineAccessibilityView.HeaderView = null;

			var outlineViewScrollView = new ScrollContainerView(outlineAccessibilityView);
			contentView.AddArrangedSubview(outlineViewScrollView);

			outlineAccessibilityView.SelectionNodeChanged += (s, e) => {
				if (outlineAccessibilityView.SelectedNode is NodeIssue nodeView)
				{
					RaiseAccessibilityIssueSelected?.Invoke(this, nodeView.Error?.View);
				}
			};

			outlineAccessibilityView.DoubleClick += (s,e) => {
				outlineAccessibilityView.ExpandItem(outlineAccessibilityView.SelectedNode, true);
			};

			outlineAccessibilityView.OutlineTableColumn.Title = "Issues";

			var service = AccessibilityService.Current;
			service.ScanFinished += (s, window) =>
			{
				var nodeBase = new NodeIssue("Issues");
				foreach (var error in service.DetectedErrors)
				{
					nodeBase.AddChild(new NodeIssue(error));
				}
				outlineAccessibilityView.SetData(nodeBase);
			};

		}

		readonly OutlineView outlineAccessibilityView;

		public string IssuesLabel
		{
			get => errorLabel.StringValue;
			set => errorLabel.StringValue = value;
		}

		readonly NSTextField errorLabel;
	}

	class NodeIssue : Node
	{
		public DetectedError Error { get; }
		static string GetName(DetectedError error)
		{
			var title = error.GetTitleMessage();
			var name = string.Format("{0} ({1}) : {2}", error.View.GetType(), error.View.Identifier ?? "N.I", title);
			return name;
		}

		public NodeIssue(DetectedError error) : base(GetName (error))
		{
			this.Error = error;
			var message = error.GetChildMessage();
			AddChild(new NodeIssue(message));
		}

		public NodeIssue(string view) : base(view)
		{
		}
	}
}
