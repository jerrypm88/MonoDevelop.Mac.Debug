// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using AppKit;
using Xwt.Mac;
using Xwt;
using System.Collections.Generic;
using Xamarin.PropertyEditing.Themes;

namespace MonoDevelop.Mac.Debug
{
	public class BorderedWindowWrapper:MacWindowWrapper
	{

	}

	public class ContentWindow : Xwt.Window
	{
		public IWindowWrapper ParentWindow {
			set {
				currentWindow.ParentWindow = value.GetWindow ();
			}
		}

		public bool HasParent => currentWindow.ParentWindow != null;

		protected NSWindow currentWindow;
		public ContentWindow ()
		{

		}

		public object NativeObject => currentWindow;

		public NSResponder FirstResponder => currentWindow.FirstResponder;

		protected virtual void OnInitialized ()
		{
			currentWindow = base.BackendHost.Backend.Window as NSWindow;
		}

		public List<ContentWindow> ChildWindows = new List<ContentWindow> ();

		internal void AddChildWindow (MacBorderedWindow borderer)
		{
			currentWindow.AddChildWindow (borderer.NativeObject as NSWindow, NSWindowOrderingMode.Above);
		}

		public void RecalculateKeyViewLoop ()
		{
			currentWindow.RecalculateKeyViewLoop ();
		}

		public PropertyEditorTheme Appearance {
			get => currentWindow.Appearance == NSAppearance.GetAppearance (NSAppearance.NameVibrantDark) ? PropertyEditorTheme.Dark : PropertyEditorTheme.Light;
			set {
				if (value == PropertyEditorTheme.Dark) {
					currentWindow.Appearance = NSAppearance.GetAppearance (NSAppearance.NameVibrantDark);
				} else {
					currentWindow.Appearance = NSAppearance.GetAppearance (NSAppearance.NameVibrantLight);
				}
			}
		}
	}

	public class MacBorderedWindow : ContentWindow
	{
		readonly NSBox box;
		IViewWrapper ObjContent { get; set; }

		public Xwt.Drawing.Color FillColor {
			get => box.FillColor.ToXwtColor ();
			set {
				BackgroundColor = value;
				box.FillColor = value.ToNSColor ();
			}
		}

		public float BorderWidth {
			get => (float)box.BorderWidth;
			set => box.BorderWidth = value;
		}

		public new bool Visible { 
			get => !box.Transparent;
			set {
				box.Transparent = !value;
			}
		}

		public string ContentViewIdentifier => ObjContent?.Identifier ?? "";

		public MacBorderedWindow (IViewWrapper content, Xwt.Drawing.Color borderColor) : this (borderColor)
		{
			ObjContent = content;

		}

		public MacBorderedWindow (Xwt.Drawing.Color borderColor)
		{
			OnInitialized ();

			currentWindow = base.BackendHost.Backend.Window as NSWindow;
			currentWindow.IsOpaque = false;
			currentWindow.ShowsToolbarButton = false;
			currentWindow.IgnoresMouseEvents = true;
			box = new NSBox { BoxType = NSBoxType.NSBoxCustom };
			currentWindow.ContentView = box;
			box.FillColor = NSColor.Clear;
			BorderWidth = 3;
			box.BorderColor = borderColor.ToNSColor ();
			box.BorderType = NSBorderType.LineBorder;
			currentWindow.StyleMask = NSWindowStyle.Borderless;
			currentWindow.Level = NSWindowLevel.Floating;
			Visible = false;
		}

		public void AlignWith (NSView view)
		{
			var frame = view.AccessibilityFrame;

			currentWindow.SetFrame (frame, true);
		}

		public void AlignWith (IViewWrapper view)
		{
			var frame = view.AccessibilityFrame;
			currentWindow.SetFrame (frame, true);
		}

		internal void OrderFront ()
		{
			currentWindow.OrderFront (null);
		}

		public void AlignWindowWithContentView ()
		{
			if (ObjContent != null) {
				AlignWith(ObjContent);
			}
		}
	}
}
