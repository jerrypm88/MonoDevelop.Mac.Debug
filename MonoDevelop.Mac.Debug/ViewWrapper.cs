// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using AppKit;
using System.Text;

namespace MonoDevelop.Mac.Debug
{
	class TextViewWrapper : ViewWrapper
	{
		NSTextView textView => (NSTextView)view;

		public TextViewWrapper(NSTextView view) : base(view)
		{

		}

		public string Text
		{
			get => textView.Value;
			set
			{
				textView.Value = value;
			}
		}
	}

	class TextFieldViewWrapper : ViewWrapper
	{
		NSTextField textView => (NSTextField)view;

		public TextFieldViewWrapper (NSTextField view) : base(view)
		{

		}

		public string StringValue
		{
			get => textView.StringValue;
			set
			{
				textView.StringValue = value;
			}
		}
	}


	class ButtonViewWrapper : ViewWrapper
	{
		NSButton textView => (NSButton)view;

		public ButtonViewWrapper(NSButton view) : base(view)
		{

		}

		public string Title
		{
			get => textView.Title;
			set
			{
				textView.Title = value;
			}
		}
	}

	public class ViewWrapper
	{
		protected readonly NSView view;
		public ViewWrapper (NSView view)
		{
			this.view = view;
		}

		public string AccessibilityLabel {
			get => view.AccessibilityLabel;
			set {
				view.AccessibilityLabel = value;
			}
		}

		public string AccessibilityTitle {
			get => view.AccessibilityTitle;
			set {
				view.AccessibilityTitle = value;
			}
		}

		public string AccessibilityHelp {
			get => view.AccessibilityHelp;
			set {
				view.AccessibilityHelp = value;
			}
		}

		public bool AccessibilityElement {
			get => view.AccessibilityElement;
			set => view.AccessibilityElement = value;
		}

		public CGRect AccessibilityFrame {
			get => view.AccessibilityFrame;
			set {
				view.AccessibilityFrame = value;
			}
		}

		public string AccessibilityChildren
		{
			get => GetChildren();
		}

		string GetChildren ()
		{
			if (view.AccessibilityChildren == null || view.AccessibilityChildren.Length == 0 || view.AccessibilityChildren.Length > 10)
			{
				return $"Count {view.AccessibilityChildren.Length}";
			}

			var builder = new StringBuilder();
			builder.Append("Count " + view.AccessibilityChildren.Length + " : ");

			for (int i = 0; i < view.AccessibilityChildren.Length; i++)
			{
				if (i > 0)
				{
					builder.Append(", ");
				}
				var type = view.AccessibilityChildren[i].GetType().ToString ();
				builder.Append($"{type}");
			}
			return builder.ToString();
		}

		public CGRect VisibleRect {
			get => view.VisibleRect ();
		}

		public CGRect Frame {
			get => view.Frame;
			set {
				view.Frame = value;
			}
		}



		public Type CurrentType {
			get => view.GetType ();
		}
	}
}
