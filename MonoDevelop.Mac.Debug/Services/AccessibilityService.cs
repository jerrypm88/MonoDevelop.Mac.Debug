// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using AppKit;
using System;
using System.Linq;
using Humanizer;
using System.Reflection;

namespace MonoDevelop.Mac.Debug.Services
{
	[Flags]
	public enum DetectedErrorType
	{
		None = 0 << 0,
		AccessibilityTitle = 1 << 0,
		AccessibilityHelp = 1 << 1,
		AccessibilityParent = 1 << 2,
		Contrast = 1 << 3,
	}

	public class DetectedError
	{
		public NSView View { get; set; }

		public NSView View2 { get; set; }

		public nfloat ContrastRatio { get; set; }

		public string Color1 { get; set; }

		public string Color2 { get; set; }

		public DetectedErrorType ErrorType { get; set; }

		public string GetTitleMessage()
		{
			List<string> errors = new List<string>();
			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityTitle) || ErrorType.HasFlag(DetectedErrorType.AccessibilityHelp))
 			{
				errors.Add("no description");
			}
			if (ErrorType.HasFlag (DetectedErrorType.AccessibilityParent))
			{
				errors.Add("no accessibility parent set");
			}
			if (ErrorType.HasFlag(DetectedErrorType.Contrast))
			{
				errors.Add("constrast issues");
			}
			return string.Format("Element has {0}", errors.Humanize()); ;
		}

		public string GetChildMessage ()
		{
			List<string> errors = new List<string>();
			List<string> additionalLines = new List<string>();
			var type = View.GetType().ToString();
			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityHelp))
			{
				additionalLines.Add($"This {type} needs set the AccessibilityHelp field");
			}
			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityTitle))
			{
				additionalLines.Add($"This {type} needs set the AccessibilityTitle field");
			}
			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityParent))
			{
				additionalLines.Add($"This {type} needs set the AccessibilityParent field");
			}

			if (ErrorType.HasFlag(DetectedErrorType.Contrast))
			{
				additionalLines.Add(string.Format("The text constrast ratio is {0}. This is based in color {1} compared with color {2}", ContrastRatio, Color1, Color2));
			}

			return string.Join(Environment.NewLine, additionalLines);
		}
	}

	public class AccessibilityService
	{
		const int MaxIssues = 200000;
		readonly public List<DetectedError> DetectedErrors = new List<DetectedError> ();
		public event EventHandler<NSWindow> ScanFinished;

		NSWindow window;

		AccessibilityService ()
		{

		}

		public int IssuesFound {
			get => DetectedErrors.Count;
		}

		bool IsSelectableView (NSView customView)
		{
			return !customView.CanBecomeKeyView && !customView.Hidden;
		}

		bool HasError (NSView customView)
		{
			if (!customView.CanBecomeKeyView || customView.Hidden) {
				return false;
			}

			if (string.IsNullOrEmpty (customView.AccessibilityTitle)) {
				return true;
			}
			if (string.IsNullOrEmpty (customView.AccessibilityHelp)) {
				return true;
			}

			return false;
		}

		class ColorResult
		{
			public NSView View
			{
				get;
				set;
			}
			public NSColor Color
			{
				get;
				set;
			}
		}

		ColorResult BackColorSearch (NSView view)
		{
		 	var properties = view.GetType().GetProperties().Where(s => s.Name.StartsWith("BackgroundColor")).ToArray ();

			var property = view.GetProperty("BackgroundColor");
			if (property != null)
			{
				var colorFound = property.GetValue(view.Superview) as NSColor;
				return new ColorResult() { View = view, Color = colorFound };
			}

			if (view.Superview is NSView superView && superView != null)
			{
				var result = BackColorSearch(superView);
				if (result != null)
				{
					return result;
				}
			}
			return null;
		}

		void Recursively (NSView customView)
		{
			if (DetectedErrors.Count >= MaxIssues) {
				return;
			}

			var errorType = DetectedErrorType.None;

			ContrastAnalisys contrastAnalisys = null;
			if (customView is NSTextField textField)
			{
				var parentColor = textField.BackgroundColor;
				if (parentColor == null && textField.Superview != null)
				{
					var result = BackColorSearch(textField.Superview);
					if (result != null)
					{
						contrastAnalisys = new ContrastAnalisys(textField.TextColor, result.Color, textField.Font);
						contrastAnalisys.View1 = customView;
						contrastAnalisys.View2 = textField.Superview;
						if (!contrastAnalisys.IsPassed)
						{
							errorType |= DetectedErrorType.Contrast;
						}
					}
				}
			}

			if (IsSelectableView(customView))
			{
				if (string.IsNullOrEmpty(customView.AccessibilityTitle)) {
					errorType |= DetectedErrorType.AccessibilityTitle;
				}
				if (string.IsNullOrEmpty(customView.AccessibilityHelp))
				{
					errorType |= DetectedErrorType.AccessibilityHelp;
				}
				if (customView.AccessibilityParent == null)
				{
					errorType |= DetectedErrorType.AccessibilityParent;
				}
			}

			if (errorType != DetectedErrorType.None)
			{
				var detectedError = new DetectedError() { View = customView, ErrorType = errorType };
				if (contrastAnalisys != null)
				{
					detectedError.Color1 = contrastAnalisys.Color1.ToHex();
					detectedError.Color2 = contrastAnalisys.Color2.ToHex();
					detectedError.ContrastRatio = contrastAnalisys.Contrast;
					detectedError.View2 = contrastAnalisys.View2;
				}

				DetectedErrors.Add(detectedError);
			}

			if (customView.Subviews == null || IsBlockedType (customView)) {
				return;
			}

			foreach (var item in customView.Subviews) {
				Recursively (item);
			}
		}

		bool IsBlockedType (NSView customView)
		{
			if (customView is NSTableViewCell) {
				return true;
			}
			return false;
		}

		public void Reset ()
		{
			DetectedErrors.Clear();
		}

		public void ScanErrors (NSWindow currentWindow)
		{
			window = currentWindow;
			DetectedErrors.Clear();
			Recursively (window.ContentView);
			ScanFinished?.Invoke (this, window);
		}

		public static AccessibilityService Current { get; } = new AccessibilityService();
	}
}
