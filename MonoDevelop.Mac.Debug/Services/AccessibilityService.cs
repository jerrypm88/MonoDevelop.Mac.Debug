// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using AppKit;
using System;
using System.Linq;

namespace MonoDevelop.Mac.Debug.Services
{
	public class AccessibilityService
	{
		const int MaxIssues = 200000;
		readonly public List<NSView> DetectedErrors = new List<NSView> ();
		public event EventHandler ScanFinished;

		NSWindow window;

		AccessibilityService ()
		{

		}

		public int IssuesFound {
			get => DetectedErrors.Count;
		}

		bool HasError (NSView customView)
		{
			if (!customView.CanBecomeKeyView || customView.Hidden) {
				return false;
			}

			if (string.IsNullOrEmpty (customView.AccessibilityTitle)) {
				return true;
			}
			if (string.IsNullOrEmpty (customView.AccessibilityHelp)) {
				return true;
			}

			return false;
		}

		void Recursively (NSView customView)
		{
			if (DetectedErrors.Count >= MaxIssues) {
				return;
			}

			if (HasError (customView)) {
				if (!DetectedErrors.Any (s => s.Identifier == customView.Identifier)) {
					DetectedErrors.Add (customView);
				}
			}

			if (customView.Subviews == null || IsBlockedType (customView)) {
				return;
			}

			foreach (var item in customView.Subviews) {
				Recursively (item);
			}
		}

		bool IsBlockedType (NSView customView)
		{
			if (customView is NSTableViewCell) {
				return true;
			}
			return false;
		}

		public void Reset ()
		{
			DetectedErrors.Clear();
		}

		public void ScanErrors (NSWindow currentWindow)
		{
			window = currentWindow;
			DetectedErrors.Clear();
			Recursively (window.ContentView);
			ScanFinished?.Invoke (this, EventArgs.Empty);
		}

		public static AccessibilityService Current { get; } = new AccessibilityService();
	}
}
