// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using AppKit;
using System;
using System.Linq;

namespace MonoDevelop.Mac.Debug.Services
{
	[Flags]
	public enum DetectedErrorType
	{
		None = 0 << 0,
		AccessibilityTitle = 1 << 0,
		AccessibilityHelp = 1 << 1
	}

	public class DetectedError
	{
		public NSView View { get; set; }

		public DetectedErrorType ErrorType { get; set; }

		public string GetTitleMessage()
		{
 			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityHelp) || ErrorType.HasFlag(DetectedErrorType.AccessibilityHelp))
 			{
				return "Element has no description";
			}
			return "";
		}

		public string GetChildMessage ()
		{
			if (ErrorType == DetectedErrorType.None)
			{
				return "";
			}
			List<string> errors = new List<string>();
			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityHelp))
			{
				errors.Add(nameof (DetectedErrorType.AccessibilityHelp));
			}
			if (ErrorType.HasFlag(DetectedErrorType.AccessibilityTitle))
			{
				errors.Add(nameof(DetectedErrorType.AccessibilityTitle));
			}
			var result = string.Format ("Issue: Element has no {0}. This view is missing useful accessibility information.", string.Join(",", errors));
			return result;
		}
	}

	public class AccessibilityService
	{
		const int MaxIssues = 200000;
		readonly public List<DetectedError> DetectedErrors = new List<DetectedError> ();
		public event EventHandler<NSWindow> ScanFinished;

		NSWindow window;

		AccessibilityService ()
		{

		}

		public int IssuesFound {
			get => DetectedErrors.Count;
		}

		bool IsSelectableView (NSView customView)
		{
			return !customView.CanBecomeKeyView && !customView.Hidden;
		}

		bool HasError (NSView customView)
		{
			if (!customView.CanBecomeKeyView || customView.Hidden) {
				return false;
			}

			if (string.IsNullOrEmpty (customView.AccessibilityTitle)) {
				return true;
			}
			if (string.IsNullOrEmpty (customView.AccessibilityHelp)) {
				return true;
			}

			return false;
		}

		void Recursively (NSView customView)
		{
			if (DetectedErrors.Count >= MaxIssues) {
				return;
			}

			if (IsSelectableView(customView))
			{
				var errorType = DetectedErrorType.None;
				if (string.IsNullOrEmpty(customView.AccessibilityTitle)) {
					errorType |= DetectedErrorType.AccessibilityTitle;
				}
				if (string.IsNullOrEmpty(customView.AccessibilityHelp))
				{
					errorType |= DetectedErrorType.AccessibilityHelp;
				}

				if (errorType != DetectedErrorType.None)
				{
					var detectedError = new DetectedError() { View = customView, ErrorType = errorType };
					DetectedErrors.Add(detectedError);
				}
			}

			if (customView.Subviews == null || IsBlockedType (customView)) {
				return;
			}

			foreach (var item in customView.Subviews) {
				Recursively (item);
			}
		}

		bool IsBlockedType (NSView customView)
		{
			if (customView is NSTableViewCell) {
				return true;
			}
			return false;
		}

		public void Reset ()
		{
			DetectedErrors.Clear();
		}

		public void ScanErrors (NSWindow currentWindow)
		{
			window = currentWindow;
			DetectedErrors.Clear();
			Recursively (window.ContentView);
			ScanFinished?.Invoke (this, window);
		}

		public static AccessibilityService Current { get; } = new AccessibilityService();
	}
}
