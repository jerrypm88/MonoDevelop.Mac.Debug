// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using AppKit;
using System.Collections.Generic;
using System.Linq;

namespace MonoDevelop.Mac.Debug
{
	class ViewDebugDelegate : IDisposable
	{
		const int MaxIssues = 50;
	 	public static string Title = "Accessibility Inspector.NET";

		readonly NSWindow window;
		NSView view, nextKeyView, previousKeyView;

		readonly BorderedWindow debugOverlayWindow;
		readonly BorderedWindow debugNextOverlayWindow;
		readonly BorderedWindow debugPreviousOverlayWindow;
		readonly StatusWindow debugStatusWindow;
		readonly NSFirstResponderWatcher watcher;

		readonly List<NSMenuItem> menuItems;

		ToolbarWindow toolbarWindow;

		#region Properties

		bool IsNextResponderOverlayVisible {
			get {
				return debugNextOverlayWindow.Visible;
			}
			set {
				debugNextOverlayWindow.Visible = value;
			}
		}

		bool IsPreviousResponderOverlayVisible {
			get {
				return debugPreviousOverlayWindow.Visible;
			}
			set {
				debugPreviousOverlayWindow.Visible = value;
			}
		}

		bool IsFirstResponderOverlayVisible {
			get {
				return debugOverlayWindow.Visible;
			}
			set {
				debugOverlayWindow.Visible = value;
			}
		}

		bool IsStatusWindowVisible {
			get {
				return debugStatusWindow.ParentWindow != null;
			}
			set {
				ShowStatusWindow (value);
			}
		}

		NSMenu Submenu {
			get {
				return NSApplication.SharedApplication.Menu?.ItemAt (0)?.Submenu;
			}
		}

		#endregion

		readonly List<BorderedWindow> detectedErrors = new List<BorderedWindow>();

		bool showDetectedErrors;
		public bool ShowDetectedErrors 
		{
			get => showDetectedErrors;
			set
			{
				if (showDetectedErrors == value)
				{
					return;
				}
				showDetectedErrors = value;

				foreach (var item in detectedErrors)
				{
					item.AlignWindowWithContentView();
					//item.AlignWith(window.Frame);
					item.Visible = value;
				}
			}
			
		}

	 	static bool IsBlockedType (NSView view)
		{
			if (view is NSTableViewCell)
			{
				return true;
			}
			return false;
		}

		void Recursively (NSView customView)
		{
			if (string.IsNullOrEmpty (customView.AccessibilityLabel) && string.IsNullOrEmpty(customView.AccessibilityLabel) && !customView.Hidden) {
				if (!detectedErrors.Any (s => s.ContentViewIdentifier == customView.Identifier)) {
					var borderer = new BorderedWindow(customView, NSColor.Red);
					detectedErrors.Add(borderer);
					window.AddChildWindow(borderer, NSWindowOrderingMode.Above);
				}
			}

			if (customView.Subviews == null || IsBlockedType(customView))
			{
				return;
			}

			if (detectedErrors.Count >= MaxIssues)
			{
				return;
			}

			foreach (var item in customView.Subviews)
			{
				try
				{
					Recursively(item);
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}

		void ScanForErrors ()
		{
			foreach (var item in detectedErrors)
			{
				item.Visible = false;
				window.RemoveChildWindow(item);
			}
			detectedErrors.Clear ();

			Recursively (window.ContentView);
			toolbarWindow.IssuesFound = detectedErrors.Count;
		}

		public ViewDebugDelegate (NSWindow window)
		{
			this.window = window;

			if (debugOverlayWindow == null) {
				debugOverlayWindow = new BorderedWindow (CGRect.Empty, NSColor.Blue);
				this.window.AddChildWindow (debugOverlayWindow, NSWindowOrderingMode.Above);
			}
			if (debugNextOverlayWindow == null) {
				debugNextOverlayWindow = new BorderedWindow (CGRect.Empty, NSColor.Yellow);
				this.window.AddChildWindow (debugNextOverlayWindow, NSWindowOrderingMode.Above);
			}

			if (debugPreviousOverlayWindow == null) {
				debugPreviousOverlayWindow = new BorderedWindow (CGRect.Empty, NSColor.Red);
				this.window.AddChildWindow (debugPreviousOverlayWindow, NSWindowOrderingMode.Above);
			}

			if (debugStatusWindow == null) {


				debugStatusWindow = new StatusWindow (new CGRect(10, 10, 600, 500));
			
			}

			if (toolbarWindow == null)
			{
				toolbarWindow = new ToolbarWindow();
				toolbarWindow.SetContentSize(new CGSize(400, 30));
				toolbarWindow.ShowIssues += (sender, e) => {
					ShowDetectedErrors = !ShowDetectedErrors;
				};

				toolbarWindow.ScanForIssues += (sender, e) => {
					ScanForErrors();
				};
			}

			menuItems = new List<NSMenuItem> ();
			PopulateSubmenu ();

			watcher = new NSFirstResponderWatcher (window);
			watcher.Changed += (sender, e) => {
				RefreshDebugData (e);
			};

			ScanForErrors();

			//window.DidResize += (sender, e) =>
			//{
			//	AlignRight(window, debugStatusWindow, WindowMargin);
			//};

			//window.DidMove += (sender, e) =>
			//{
			//	AlignRight(window, debugStatusWindow, WindowMargin);
			//};
		}

		void ShowStatusWindow (bool value)
		{
			if (value) {
				if (!IsStatusWindowVisible) {
					window.AddChildWindow (debugStatusWindow, NSWindowOrderingMode.Above);
					window.AddChildWindow(toolbarWindow, NSWindowOrderingMode.Above);
					RefreshStatusWindow ();
				}
			}
			else {
				toolbarWindow?.Close();
				debugStatusWindow?.Close ();
			}
		}

		const int WindowMargin = 4;

		void RefreshStatusWindow ()
		{
			toolbarWindow.AlignTop(window, WindowMargin);
			debugStatusWindow.AlignRight(window, WindowMargin);
			var anyFocusedView = view != null;
			if (!anyFocusedView)
				return;

			debugStatusWindow.GenerateStatusView (view, nextKeyView, previousKeyView);
		}

		void PopulateSubmenu ()
		{
			var submenu = Submenu;
			if (submenu == null)
				throw new NullReferenceException ("Menu cannot be null");

			int menuCount = 0;
			submenu.AutoEnablesItems = false;

			ClearSubmenuItems (submenu);

			menuItems.Clear ();
			menuItems.AddRange (GetDefaultMenuItems ());

			foreach (var item in menuItems) {
				submenu.InsertItem (item, menuCount++);
			}
		}

		void ClearSubmenuItems (NSMenu submenu)
		{
			foreach (var item in menuItems) {
				submenu.RemoveItem (item);
			}
		}

		List<NSMenuItem> GetDefaultMenuItems ()
		{
			return new List<NSMenuItem> {
				new NSMenuItem (string.Format ("{0} v{1}",Title, GetAssemblyVersion ()), ShowHideDetailDebuggerWindow) { Enabled = false },
				NSMenuItem.SeparatorItem,
				new NSMenuItem ($"Show {Title}", ShowHideDetailDebuggerWindow),
				new NSMenuItem ("Show First Responder Overlay", ShowFirstResponderOverlayHandler),
				new NSMenuItem ("Show Next Responder Overlay", ShowNextResponderOverlayHandler),
				new NSMenuItem ("Show Previous Responder Overlay", ShowPreviousResponderOverlayHandler),
				NSMenuItem.SeparatorItem
			};
		}

		void ShowFirstResponderOverlayHandler (object sender, EventArgs e)
		{
			IsFirstResponderOverlayVisible = !IsFirstResponderOverlayVisible;
			RefreshDebugData (window.FirstResponder);

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} First Responder Overlay", ToMenuAction (!IsFirstResponderOverlayVisible));
		}

		void ShowPreviousResponderOverlayHandler (object sender, EventArgs e)
		{
			IsPreviousResponderOverlayVisible = !IsPreviousResponderOverlayVisible;
			RefreshDebugData (window.FirstResponder);

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} Previous Responder Overlay", ToMenuAction (!IsPreviousResponderOverlayVisible));
		}

		void ShowNextResponderOverlayHandler (object sender, EventArgs e)
		{
			IsNextResponderOverlayVisible = !IsNextResponderOverlayVisible;
			RefreshDebugData (window.FirstResponder);

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} Next Responder Overlay", ToMenuAction (!IsNextResponderOverlayVisible));
		}

		void ShowHideDetailDebuggerWindow (object sender, EventArgs e)
		{
			IsStatusWindowVisible = !IsStatusWindowVisible;

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{1} {0}", Title, ToMenuAction (!IsStatusWindowVisible));
		}

		string ToMenuAction (bool value)
		{
			return value ? "Show" : "Hide";
		}

		internal void RefreshDebugData (NSResponder firstResponder)
		{
			view = firstResponder as NSView;
			if (view != null) {
				debugOverlayWindow.AlignWith (view);
			}

			nextKeyView = view?.NextValidKeyView as NSView;
			if (nextKeyView != null) {
				debugNextOverlayWindow.AlignWith (nextKeyView);
			}

			previousKeyView = view?.PreviousValidKeyView as NSView;
			if (previousKeyView != null) {
				debugPreviousOverlayWindow.AlignWith (previousKeyView);
			}

			RefreshStatusWindow ();
		}

		internal void StartWatcher ()
		{
			watcher.Start ();
		}

		string GetAssemblyVersion ()
		{
			var assembly = System.Reflection.Assembly.GetExecutingAssembly ();
			var fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo (assembly.Location);
			return fileVersionInfo.ProductVersion;
		}

		public void Dispose ()
		{
			ClearSubmenuItems (Submenu);
			debugOverlayWindow?.Close ();
			debugNextOverlayWindow?.Close ();
			debugPreviousOverlayWindow?.Close ();
			debugStatusWindow?.Close ();
			watcher.Dispose ();
		}
	}
}
