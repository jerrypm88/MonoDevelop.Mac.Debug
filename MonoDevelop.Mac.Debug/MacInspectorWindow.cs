// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using AppKit;
using CoreGraphics;
using Foundation;

namespace MonoDevelop.Mac.Debug
{
	public class MacWindowWrapper : NSWindow, IWindowWrapper
	{
		public MacWindowWrapper()
		{
			Initialize();
		}

		public MacWindowWrapper(NSCoder coder) : base(coder)
		{
			Initialize();
		}

		public MacWindowWrapper(CGRect contentRect, NSWindowStyle aStyle, NSBackingStore bufferingType, bool deferCreation) : base(contentRect, aStyle, bufferingType, deferCreation)
		{
			Initialize();
		}

		public MacWindowWrapper(CGRect contentRect, NSWindowStyle aStyle, NSBackingStore bufferingType, bool deferCreation, NSScreen screen) : base(contentRect, aStyle, bufferingType, deferCreation, screen)
		{
			Initialize();
		}

		protected MacWindowWrapper(NSObjectFlag t) : base(t)
		{
			Initialize();
		}

		protected internal MacWindowWrapper(IntPtr handle) : base(handle)
		{
			Initialize();
		}

		void Initialize ()
		{
			DidResize += (s, e) =>
			{
				ResizeRequested?.Invoke(this, EventArgs.Empty);
			};

			DidMove += (s, e) => {
				MovedRequested?.Invoke(this, EventArgs.Empty);
			};

			base.DidResignKey += (s, e) => {
				LostFocus?.Invoke (this, EventArgs.Empty);
			};
		}

		public NSWindow GetWindow()
		{
			return this;
		}

		public void AddChildWindow (ContentWindow borderer)
		{
			base.AddChildWindow (borderer.NativeObject as NSWindow, NSWindowOrderingMode.Above);
		}

		IViewWrapper IWindowWrapper.ContentView
		{
			get
			{
				if (ContentView is NSView view)
				{
					return new MacViewWrapper(view);
				}
				return null;
			}
			set
			{
				ContentView = value.Content as NSView;
			}
		}

		IViewWrapper IWindowWrapper.FirstResponder
		{
			get
			{
				if (FirstResponder is NSView view)
				{
					return new MacViewWrapper(view);
				}
				return null;
			}

		}

		public float FrameWidth => (float) base.Frame.Width;

		public float FrameHeight => (float)base.Frame.Height;

		public float FrameY => (float)base.Frame.Y;
		public float FrameX => (float)base.Frame.X;

		public event EventHandler ResizeRequested;
		public event EventHandler MovedRequested;
		public event EventHandler LostFocus;
	}

	public class MacViewWrapper : IViewWrapper
	{
		public bool Hidden => widget.Hidden;

		public string Identifier => widget.Identifier;

		public CGRect AccessibilityFrame => widget.AccessibilityFrame;

		public List<IViewWrapper> Subviews
		{
			get
			{
				List<IViewWrapper> tmp = new List<IViewWrapper>();
				foreach (var w in widget.Subviews)
				{
					tmp.Add(new MacViewWrapper(w));
				}
				return tmp;
			}
		}

		public IViewWrapper NextValidKeyView
		{
			get
			{
				if (widget.NextValidKeyView != null)
					return new MacViewWrapper(widget.NextValidKeyView);
				return null;
			}
		}

		public IViewWrapper PreviousValidKeyView
		{
			get
			{
				if (widget.PreviousValidKeyView != null)
					return new MacViewWrapper(widget.PreviousValidKeyView);
				return null;
			}
		}

		public CGRect Frame => widget.Frame;

		public IViewWrapper Superview
		{
			get
			{
				if (widget.Superview != null)
					return new MacViewWrapper(widget.Superview);
				return null;
			}
		}

		public string AccessibilityTitle
		{
			get => widget.AccessibilityTitle;
			set => widget.AccessibilityTitle = value;
		}

		public string AccessibilityHelp
		{
			get => widget.AccessibilityHelp;
			set => widget.AccessibilityHelp = value;
		}

		public object AccessibilityParent
		{
			get
			{
				return widget.AccessibilityParent;
			}
			set => widget.AccessibilityParent = value as NSView;
		}

		public bool CanBecomeKeyView
		{
			get => widget.CanBecomeKeyView;
		}

		public object Content => widget;

		public void RemoveFromSuperview()
		{
			widget.RemoveFromSuperview();
		}

		internal NSView widget;
		public MacViewWrapper(NSView widget)
		{
			this.widget = widget;
		}
	}

	[Register("DebugWindow")]
	public class MacInspectorWindow : MacWindowWrapper
	{
		public MacInspectorWindow() : base()
		{

		}

		public override void BecomeMainWindow()
		{
			InspectorContext.Attach(this);
			base.BecomeMainWindow();
		}

		// Called when created from unmanaged code
		public MacInspectorWindow(IntPtr handle) : base(handle)
		{

		}

		public MacInspectorWindow(NSCoder coder) : base(coder)
		{
		}

		public MacInspectorWindow(CGRect contentRect, NSWindowStyle aStyle, NSBackingStore bufferingType, bool deferCreation) : base(contentRect, aStyle, bufferingType, deferCreation)
		{
		}

		public MacInspectorWindow(CGRect contentRect, NSWindowStyle aStyle, NSBackingStore bufferingType, bool deferCreation, NSScreen screen) : base(contentRect, aStyle, bufferingType, deferCreation, screen)
		{
		}

		protected MacInspectorWindow(NSObjectFlag t) : base(t)
		{
		}

		public override bool MakeFirstResponder(NSResponder aResponder)
		{
			if (aResponder is NSView view)
			{
				InspectorContext.ChangeFocusedView(new MacViewWrapper(view));
			}
			return base.MakeFirstResponder(aResponder);
		}
	}
}
