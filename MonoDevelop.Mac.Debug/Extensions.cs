// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using CoreGraphics;
using MonoDevelop.Mac.Debug;

namespace AppKit
{
	public static class Extensions
	{
		internal static NodeView Recursively (this NodeView nodeView, NSView view)
		{
			if (nodeView.View == view) {
				return nodeView;
			}

			if (nodeView.ChildCount == 0) {
				return null;
			}

			for (int i = 0; i < nodeView.ChildCount; i++) {
				var node = (NodeView) nodeView.GetChild (i);
				var found = Recursively (node, view);
				if (found != null) {
					return found;
				}
			}
			return null;
		}
		public static void AlignRight (this NSWindow sender, NSWindow toView, int pixels)
		{
			var frame = sender.Frame;
			frame.Location = new CGPoint(toView.Frame.Right + pixels, toView.Frame.Bottom - frame.Height);
			sender.SetFrame(frame, true);
		}

		public static void AlignTop (this NSWindow from, NSWindow toView, int pixels)
		{
			var frame = from.Frame;
			frame.Location = new CGPoint(toView.Frame.Left, toView.AccessibilityFrame.Y + toView.Frame.Height + pixels);
			from.SetFrame(frame, true);
		}

		public static CGRect Add (this CGRect sender, CGRect toAdd)
		{
			return new CGRect (sender.X + toAdd.X, sender.Y + toAdd.Y, sender.Width + toAdd.Width, sender.Height + toAdd.Height);
		}

		public static CGRect Add (this CGRect sender, CGPoint toAdd)
		{
			return new CGRect (sender.X + toAdd.X, sender.Y + toAdd.Y, sender.Width, sender.Height);
		}

		public static CGRect Add (this CGRect sender, CGSize toAdd)
		{
			return new CGRect (sender.X, sender.Y, sender.Width + toAdd.Width, sender.Height + toAdd.Height);
		}

		public static List<string> GenerateLog (this NSView view, string title)
		{
			return new List<string> () {
				string.Format("============={0}==========", title),
				string.Format("Identifier: {0}", view.Identifier),
				string.Format("Type: {0}", view.GetType()),
				string.Format("Frame: {0}", view.Frame),
				string.Format("Bounds: {0}", view.Bounds),
				string.Format("VisibleRect: {0}", view.VisibleRect()),
				string.Format("AccessibilityIdentifier: {0}", string.IsNullOrEmpty (view.AccessibilityIdentifier) ? "<null>" : view.AccessibilityIdentifier),
				string.Format("AccessibilityFrame: {0}", view.AccessibilityFrame),
				string.Format("AccessibilityTitle: {0}", string.IsNullOrEmpty (view.AccessibilityTitle) ? "<null>" : view.AccessibilityTitle),
				string.Format("AccessibilityHelp: {0}",string.IsNullOrEmpty (view.AccessibilityHelp) ? "<null>" : view.AccessibilityHelp),
				string.Format("AccessibilityIndex: {0}", view.AccessibilityIndex),
				string.Format("AccessibilityRole: {0}", string.IsNullOrEmpty (view.AccessibilityRole) ? "<null>" : view.AccessibilityRole),
				string.Format("AccessibilityRoleDescription: {0}", string.IsNullOrEmpty (view.AccessibilityRoleDescription) ? "<null>" : view.AccessibilityRoleDescription),
			};
		}
	}
}
