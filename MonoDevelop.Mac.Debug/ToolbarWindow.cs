// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;

namespace MonoDevelop.Mac.Debug
{
	public class ToolbarWindow : NSWindow
	{
		public event EventHandler ShowIssues;
		public event EventHandler ScanForIssues;

		int issuesFound = 0;
		public int IssuesFound
		{
			get => issuesFound;
			set
			{
				issuesFound = value;
				errorTextButton.Title = $"{value} issues found";
			}
		}

		NSButton errorTextButton;

		public ToolbarWindow ()
		{
			StyleMask = NSWindowStyle.Borderless;
			var stackView = NativeViewHelpers.CreateHorizontalStackView (10);
			ContentView.AddSubview (stackView);
			stackView.TopAnchor.ConstraintEqualToAnchor (stackView.TopAnchor, 0).Active = true;
			stackView.LeftAnchor.ConstraintEqualToAnchor (stackView.LeftAnchor, 0).Active = true;

			//Visual issues view
			var titleContainter = NativeViewHelpers.CreateHorizontalStackView();

			stackView.AddArrangedSubview(titleContainter);

			var title = NativeViewHelpers.CreateLabel("Scan result: ");
			titleContainter.AddArrangedSubview(title);

			var btn = new ImageButton (NSImage.ImageNamed("22"));

			errorTextButton = NativeViewHelpers.CreateButton($"{IssuesFound} issues");
			titleContainter.AddArrangedSubview(errorTextButton);

			errorTextButton.Activated += ErrorTextButton_Activated;

			var scanIssuesButton = NativeViewHelpers.CreateButton(NSBezelStyle.RoundRect, NSFont.SystemFontOfSize(NSFont.SystemFontSize), "Scan now");
			titleContainter.AddArrangedSubview(scanIssuesButton);
			scanIssuesButton.Activated += (s, e) => {
				ScanForIssues?.Invoke(this, EventArgs.Empty);
			};
		}

		void ErrorTextButton_Activated(object sender, EventArgs e)
		{
			ShowIssues?.Invoke(this, EventArgs.Empty);
		}

		protected override void Dispose(bool disposing)
		{
			errorTextButton.Activated -= ErrorTextButton_Activated;
			base.Dispose(disposing);
		
		}
	}
}
