// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;

namespace MonoDevelop.Mac.Debug
{
	public class ToolbarWindow : NSWindow
	{
		public event EventHandler ShowIssues;
		public event EventHandler ScanForIssues;

		public event EventHandler KeyViewLoop;
		public event EventHandler NextKeyViewLoop;
		public event EventHandler PreviousKeyViewLoop;

		const int MenuItemSeparation = 3;
		const int LeftPadding = 5;

		int issuesFound = 0;

		NSButton errorTextButton;

		NSTextField errorLabel;

		public int IssuesFound
		{
			get => issuesFound;
			set
			{
				issuesFound = value;
				errorLabel.StringValue = $"{value} issues found";
			}
		}

		public ToolbarWindow ()
		{
			//BackgroundColor = NSColor.Clear;
			IsOpaque = false;
			StyleMask = NSWindowStyle.Titled | NSWindowStyle.FullSizeContentView;
			TitlebarAppearsTransparent = true;
			TitleVisibility = NSWindowTitleVisibility.Hidden;
			ShowsToolbarButton = false;

			var stackView = NativeViewHelpers.CreateHorizontalStackView (MenuItemSeparation);
			ContentView.AddSubview (stackView);
			stackView.CenterYAnchor.ConstraintEqualToAnchor (ContentView.CenterYAnchor, 0).Active = true;
			stackView.LeftAnchor.ConstraintEqualToAnchor (ContentView.LeftAnchor, LeftPadding).Active = true;

			//Visual issues view
			var keyViewLoopButton = new ToggleButton(NSImage.ImageNamed("overlay-actual"));
			stackView.AddArrangedSubview(keyViewLoopButton);
			keyViewLoopButton.WidthAnchor.ConstraintEqualToConstant(StatusWindow.ButtonWidth).Active = true;
			keyViewLoopButton.Activated += (s, e) => {
				KeyViewLoop?.Invoke(this, EventArgs.Empty);
			};

			var prevKeyViewLoopButton = new ToggleButton(NSImage.ImageNamed("overlay-previous"));
			stackView.AddArrangedSubview(prevKeyViewLoopButton);
			prevKeyViewLoopButton.WidthAnchor.ConstraintEqualToConstant(StatusWindow.ButtonWidth).Active = true;
			prevKeyViewLoopButton.Activated += (s, e) => {
				PreviousKeyViewLoop?.Invoke(this, EventArgs.Empty);
			};

			var nextKeyViewLoopButton = new ToggleButton(NSImage.ImageNamed("overlay-next"));
			stackView.AddArrangedSubview(nextKeyViewLoopButton);
			nextKeyViewLoopButton.WidthAnchor.ConstraintEqualToConstant(StatusWindow.ButtonWidth).Active = true;
			nextKeyViewLoopButton.Activated += (s, e) => {
				NextKeyViewLoop?.Invoke(this, EventArgs.Empty);
			};

			stackView.AddArrangedSubview(new VerticalSeparator());

			errorTextButton = new ToggleButton (NSImage.ImageNamed("error-16"));

			stackView.AddArrangedSubview(errorTextButton);
			errorTextButton.WidthAnchor.ConstraintEqualToConstant(StatusWindow.ButtonWidth).Active = true;

			errorTextButton.Activated += ErrorTextButton_Activated;

			var rescanButton = new ImageButton(NSImage.ImageNamed("rescan-16"));
			stackView.AddArrangedSubview(rescanButton);
			rescanButton.WidthAnchor.ConstraintEqualToConstant(StatusWindow.ButtonWidth).Active = true;

			rescanButton.Activated += RescanButton_Activated;

			stackView.AddArrangedSubview(new VerticalSeparator());

			errorLabel = NativeViewHelpers.CreateLabel ($"{IssuesFound} issues");
			stackView.AddArrangedSubview(errorLabel);
		}

		void RescanButton_Activated(object sender, EventArgs e)
		{
			ScanForIssues?.Invoke(this, EventArgs.Empty);
		}

		void ErrorTextButton_Activated(object sender, EventArgs e)
		{
			ShowIssues?.Invoke(this, EventArgs.Empty);
		}

		protected override void Dispose(bool disposing)
		{
			errorTextButton.Activated -= ErrorTextButton_Activated;
			base.Dispose(disposing);
		
		}
	}
}
