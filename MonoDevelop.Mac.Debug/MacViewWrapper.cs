// This file has been autogenerated from a class added in the UI designer.

using System.Collections.Generic;
using AppKit;
using CoreGraphics;

namespace MonoDevelop.Mac.Debug
{
	public class MacViewWrapper : IViewWrapper
	{
		public bool Hidden => widget.Hidden;

		public string Identifier => widget.Identifier;

		public CGRect AccessibilityFrame => widget.AccessibilityFrame;

		public List<IViewWrapper> Subviews {
			get {
				List<IViewWrapper> tmp = new List<IViewWrapper> ();
				foreach (var w in widget.Subviews) {
					tmp.Add (new MacViewWrapper (w));
				}
				return tmp;
			}
		}

		public IViewWrapper NextValidKeyView {
			get {
				if (widget.NextValidKeyView != null)
					return new MacViewWrapper (widget.NextValidKeyView);
				return null;
			}
		}

		public IViewWrapper PreviousValidKeyView {
			get {
				if (widget.PreviousValidKeyView != null)
					return new MacViewWrapper (widget.PreviousValidKeyView);
				return null;
			}
		}

		public CGRect Frame => widget.Frame;

		public IViewWrapper Superview {
			get {
				if (widget.Superview != null)
					return new MacViewWrapper (widget.Superview);
				return null;
			}
		}

		public string AccessibilityTitle {
			get => widget.AccessibilityTitle;
			set => widget.AccessibilityTitle = value;
		}

		public string AccessibilityHelp {
			get => widget.AccessibilityHelp;
			set => widget.AccessibilityHelp = value;
		}

		public object AccessibilityParent {
			get {
				return widget.AccessibilityParent;
			}
			set => widget.AccessibilityParent = value as NSView;
		}

		public bool CanBecomeKeyView {
			get => widget.CanBecomeKeyView;
		}

		public object NativeView => widget;
		public object View => widget;
		public string NodeName => widget.GetType ().Name;

		public void RemoveFromSuperview ()
		{
			widget.RemoveFromSuperview ();
		}

		internal NSView widget;
		public MacViewWrapper (NSView widget)
		{
			this.widget = widget;
		}
	}
}
