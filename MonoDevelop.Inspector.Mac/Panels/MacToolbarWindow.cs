// This file has been autogenerated from a class added in the UI designer.

using System;
using AppKit;
using System.Linq;
using Foundation;

namespace MonoDevelop.Inspector.Mac
{
	class MacToolbarWindow : MacWindowWrapper, IToolbarWindow
	{
		public event EventHandler<bool> KeyViewLoop;
		public event EventHandler<bool> NextKeyViewLoop;
		public event EventHandler<bool> PreviousKeyViewLoop;

		public event EventHandler<InspectorViewMode> InspectorViewModeChanged;

		public event EventHandler<bool> ThemeChanged;

		public event EventHandler ItemDeleted;
		public event EventHandler ItemImageChanged;
		public event EventHandler<FontData> FontChanged;

		const int MenuItemSeparation = 3;
		const int LeftPadding = 5;

		readonly NSStackView stackView;

        readonly IInspectDelegate inspectDelegate;

        readonly ToggleButton toolkitButton;

        NSView rescanSeparator;
      
        public void ShowToolkit (bool value)
        {
            if (!value) {
                toolkitButton.RemoveFromSuperview();
                rescanSeparator.RemoveFromSuperview();
            } else {
                if (!stackView.Subviews.Contains (toolkitButton)){
                    stackView.AddArrangedSubview(toolkitButton);
                    stackView.AddArrangedSubview(rescanSeparator);
                } 
            } 
        }

		public MacToolbarWindow (IInspectDelegate inspectDelegate)
		{
            this.inspectDelegate = inspectDelegate;
			//BackgroundColor = NSColor.Clear;
			IsOpaque = false;
			StyleMask = NSWindowStyle.Titled | NSWindowStyle.FullSizeContentView;
			TitlebarAppearsTransparent = true;
			TitleVisibility = NSWindowTitleVisibility.Hidden;
			ShowsToolbarButton = false;
			MovableByWindowBackground = false;

			stackView = NativeViewHelper.CreateHorizontalStackView (MenuItemSeparation);
			ContentView.AddSubview (stackView);
			stackView.CenterYAnchor.ConstraintEqualToAnchor (ContentView.CenterYAnchor, 0).Active = true;
			stackView.LeftAnchor.ConstraintEqualToAnchor (ContentView.LeftAnchor, LeftPadding).Active = true;

            //stackView.RightAnchor.ConstraintEqualToAnchor(ContentView.RightAnchor, -LeftPadding).Active = true;

            //Visual issues view
            var actualImage = (NSImage)inspectDelegate.GetImageResource("overlay-actual.png").NativeObject;
            var keyViewLoopButton = new ToggleButton() { Image = actualImage };
			keyViewLoopButton.ToolTip = "Shows current focused item";
			AddButton (keyViewLoopButton);
			keyViewLoopButton.Activated += (s, e) => {
				KeyViewLoop?.Invoke(this, keyViewLoopButton.IsToggled);
			};

            var previousImage = (NSImage)inspectDelegate.GetImageResource("overlay-previous.png").NativeObject;
            var prevKeyViewLoopButton = new ToggleButton() { Image = previousImage }; 
			prevKeyViewLoopButton.ToolTip = "Shows previous view item";
			AddButton (prevKeyViewLoopButton);
			prevKeyViewLoopButton.Activated += (s, e) => {
				PreviousKeyViewLoop?.Invoke(this, prevKeyViewLoopButton.IsToggled);
			};

            var nextImage = (NSImage)inspectDelegate.GetImageResource("overlay-next.png").NativeObject;
            var nextKeyViewLoopButton = new ToggleButton() { Image = nextImage };
			nextKeyViewLoopButton.ToolTip = "Shows next view item";
			AddButton (nextKeyViewLoopButton);
			nextKeyViewLoopButton.Activated += (s, e) => {
				NextKeyViewLoop?.Invoke(this, nextKeyViewLoopButton.IsToggled);
			};

			AddSeparator ();

            var rescanImage = (NSImage)inspectDelegate.GetImageResource("rescan-16.png").NativeObject;
            toolkitButton = new ToggleButton { Image = rescanImage };
			toolkitButton.ToolTip = "Change beetween Toolkits";
			AddButton (toolkitButton);
			toolkitButton.Activated += ToolkitButton_Activated;;

            rescanSeparator = AddSeparator ();

            var themeImage = (NSImage)inspectDelegate.GetImageResource("style-16.png").NativeObject;
            var themeButton = new ToggleButton { Image = themeImage }; 
			themeButton.ToolTip = "Change Style Theme";
			AddButton (themeButton);
			themeButton.Activated += ThemeButton_Activated;

			AddSeparator ();

            var deleteImage = (NSImage)inspectDelegate.GetImageResource("delete-16.png").NativeObject;
            deleteButton = new ImageButton(deleteImage);
			deleteButton.ToolTip = "Delete selected item";
			AddButton (deleteButton);
			deleteButton.Activated += (s,e) =>
			{
				ItemDeleted?.Invoke(this, EventArgs.Empty);
			};

            var changeImg = (NSImage)inspectDelegate.GetImageResource("image-16.png").NativeObject;
			changeImage = new ImageButton(changeImg);
			changeImage.ToolTip = "Change image from selected item";
			AddButton (changeImage);

			changeImage.Activated += (s, e) =>
			{
				ItemImageChanged?.Invoke(this, EventArgs.Empty);
			};

			fontsCombobox = new NSComboBox() { TranslatesAutoresizingMaskIntoConstraints = false };
			fontsCombobox.ToolTip = "Change font from selected item";
			fonts = NSFontManager.SharedFontManager.AvailableFonts
				.Select (s => new NSString(s))
				.ToArray ();

			fontsCombobox.Add(fonts);

			stackView.AddArrangedSubview(fontsCombobox);
			fontsCombobox.WidthAnchor.ConstraintEqualToConstant(220).Active = true;
		
			fontSizeTextView = new NSTextField() { TranslatesAutoresizingMaskIntoConstraints = false };
			fontSizeTextView.ToolTip = "Change font size from selected item";
			stackView.AddArrangedSubview(fontSizeTextView);
			fontSizeTextView.WidthAnchor.ConstraintEqualToConstant(40).Active = true;

			fontsCombobox.SelectionChanged += (s, e) => {
				OnFontChanged();
			};

			fontSizeTextView.Activated += (s, e) => {
				OnFontChanged();
			};
			//AddSeparator();
			stackView.AddArrangedSubview(new NSView() { TranslatesAutoresizingMaskIntoConstraints = false });
		}

        public void ChangeView (InspectorManager manager, IViewWrapper viewWrapper)
        {
            bool showImage = false;
            bool showFont = false;
            //NSPopUpButton
            var fontData = manager.Delegate.GetFont(viewWrapper);
            if (fontData?.Font != null)
            {
                var currentFontName = ((NSFont)fontData.Font.NativeObject).FontName;
                if (currentFontName == ".AppleSystemUIFont")
                {
                    currentFontName = "HelveticaNeue";
                }
                var name = fonts.FirstOrDefault(s => s.ToString() == currentFontName);
                fontsCombobox.Select(name);

                fontSizeTextView.IntValue = (int)fontData.Size;
                showFont = true;
            }

            if (viewWrapper.NativeView is NSImageView || viewWrapper.NativeView is NSButton)
            {
                showImage = true;
            }

            imageButtonVisible = showImage;
            fontButtonsVisible = showFont;
        }

        void ToolkitButton_Activated (object sender, EventArgs e)
		{
			InspectorViewModeChanged?.Invoke (this, toolkitButton.State == NSCellStateValue.On ? InspectorViewMode.Xwt : InspectorViewMode.Native);
		}

		bool fontButtonsVisible
		{
			get => stackView.Subviews.Contains(fontsCombobox);
			set
			{
				if (fontButtonsVisible == value)
				{
					return;
				}

				if (value)
				{
					stackView.AddArrangedSubview(fontsCombobox);
					stackView.AddArrangedSubview(fontSizeTextView);
				}
				else
				{
					fontSizeTextView.RemoveFromSuperview();
					fontsCombobox.RemoveFromSuperview();
				}
			}
		}

		bool imageButtonVisible
		{
			get => stackView.Subviews.Contains(changeImage);
			set
			{
				if (imageButtonVisible == value)
				{
					return;
				}

				if (value)
				{
					stackView.AddArrangedSubview(changeImage);
				}
				else
				{
					changeImage.RemoveFromSuperview();
				}
			}
		}

		void OnFontChanged ()
		{
			var currentIndex = (int)fontsCombobox.SelectedIndex;
			if (currentIndex >= -1)
			{
				var selected = fonts[currentIndex].ToString();
				var fontSize = fontSizeTextView.IntValue;

                //public FontData (string font, float size)
                //{
                //  Size = size;
                //  Font = NSFont.FromFontName (font, size);
                //}

                IFontWrapper font = inspectDelegate.GetFromName(selected, fontSize);
                FontChanged?.Invoke(this, new FontData (font, fontSize));
			}
		}

		NSString[] fonts;
		NSComboBox fontsCombobox;
		NSTextField fontSizeTextView;
		//public override bool CanBecomeKeyWindow => false;
		//public override bool CanBecomeMainWindow => false;

		ImageButton deleteButton, changeImage;

		public bool ImageChangedEnabled
		{
			get => changeImage.Enabled;
			set => changeImage.Enabled = value;
		}

		void ThemeButton_Activated (object sender, EventArgs e)
		{
			if (sender is ToggleButton btn) {
				ThemeChanged?.Invoke (this, btn.IsToggled);
			}
		}

        NSView AddSeparator ()
        {
            var separator = new VerticalSeparator();
            stackView.AddArrangedSubview(separator);
            return separator;
        }  

		void AddButton (NSButton view)
		{
			stackView.AddArrangedSubview (view);
			view.WidthAnchor.ConstraintEqualToConstant (InspectorWindow.ButtonWidth).Active = true;
		}
	}
}
